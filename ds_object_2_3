/*
    DS Objects.
*/
#macro ds_type_array -1
#macro ds_type_2darray -2
#macro ds_type_tuple -3

function ds_struct(_t, _o) constructor {
    ty = _t;
    obj = _o;
};

function ds_tuple (_v1, _v2) constructor {
    val1 = _v1;
    val2 = _v2;
}

function ds_object_create(_dstype, _width, _height){
    var _source = -1;
    
    switch(_dstype) {
        case ds_type_list:
            _source = ds_list_create();
        break;
        case ds_type_grid:
            _source = ds_grid_create(_width, _height);
        break;
        case ds_type_map:
            _source = ds_map_create();
        break;
        case ds_type_queue:
            _source = ds_queue_create();
        break;
        case ds_type_stack:
            _source = ds_stack_create();
        break;
        case ds_type_priority:
            _source = ds_priority_create();
        break;
        case ds_type_array:
            _source = array_create(_width, 0);
        break;
        case ds_type_2darray:
            _source = array_create(_width * _height, 0);
        break;
        case ds_type_tuple:
            _source = new ds_tuple(_width, _height);
        break;
    }
    
    return new ds_struct(_dstype, _source);
};

function ds_object_create_ext(_dstype, _source) {
    return new ds_struct(_dstype, _source);
}

function ds_object_destroy(_source) {
    switch(_source.ty) {
        case ds_type_list:
            ds_list_destroy(_source.obj);
        break;
        case ds_type_grid:
            ds_grid_destroy(_source.obj);
        break;
        case ds_type_map:
            ds_map_destroy(_source.obj);
        break;
        case ds_type_queue:
            ds_queue_destroy(_source.obj);
        break;
        case ds_type_stack:
            ds_stack_destroy(_source.obj);
        break;
        case ds_type_priority:
            ds_priority_destroy(_source.obj);
        break;
        case ds_type_array:
            _source.obj = -1;
        break;
        case ds_type_2darray:
            _source.obj = -1;
        break;
        case ds_type_tuple:
            delete _source.obj;
        break;
    }
    
    delete _source;
}

function ds_object_copy(_source, _destination) {
    if (is_undefined(_destination) || !ds_object_is_valid(_destination) || _source.type != _destination.type)
        return 0;
    
    switch(_source.ty) {
        case ds_type_list:
            ds_list_copy(_destination.obj, _source.obj);
        break;
        case ds_type_grid:
            ds_grid_copy(_destination.obj, _source.obj);
        break;
        case ds_type_map:
            ds_map_copy(_destination.obj, _source.obj);
        break;
        case ds_type_queue:
            ds_queue_copy(_destination.obj, _source.obj);
        break;
        case ds_type_stack:
            ds_stack_copy(_destination.obj, _source.obj);
        break;
        case ds_type_priority:
            ds_priority_copy(_destination.obj, _source.obj);
        break;
        case ds_type_array:
        case ds_type_2darray:
            array_copy(_destination.obj, 0, _source.obj, 0, array_length(_source.obj));
        break;
        case ds_type_tuple:
            _destination.obj.val1 = _source.obj.val1;
            _destination.obj.val2 = _source.obj.val2;
        break;
    }
    
    return _destination;
}

function ds_object_clone(_source) {
    if (is_undefined(_source) || !ds_object_is_valid(_source))
        return 0;
    
    var _destination = new ds_struct(_source.ty, -1);
    
    switch(_source.ty) {
        case ds_type_list:
            _destination.obj = ds_list_create();
            ds_list_copy(_destination.obj, _source.obj);
        break;
        case ds_type_grid:
            _destination.obj = ds_grid_create(ds_grid_width(_source.obj), ds_grid_height(_source.obj));
            ds_grid_copy(_destination.obj, _source.obj);
        break;
        case ds_type_map:
            _destination.obj = ds_map_create();
            ds_map_copy(_destination.obj, _source.obj);
        break;
        case ds_type_queue:
            _destination.obj = ds_queue_create();
            ds_queue_copy(_destination.obj, _source.obj);
        break;
        case ds_type_stack:
            _destination.obj = ds_stack_create();
            ds_stack_copy(_destination.obj, _source.obj);
        break;
        case ds_type_priority:
            _destination.obj = ds_priority_create();
            ds_priority_copy(_destination.obj, _source.obj);
        break;
        case ds_type_array:
        case ds_type_2darray:
            _destination.obj = array_create(array_length(_source.obj), 0);
            array_copy(_destination.obj, 0, _source.obj, 0, array_length(_source.obj));
        break;
        case ds_type_tuple:
            _destination.obj = new ds_tuple(_source.obj.val1, _source.obj.val2);
        break;
    }
    
    return _destination;
}

function ds_object_is_valid(_source) {
    var valid_type = false;
    
    switch(_source.ty) {
        case ds_type_list:
        case ds_type_grid:
        case ds_type_map:
        case ds_type_queue:
        case ds_type_stack:
        case ds_type_priority:
        case ds_type_array:
        case ds_type_2darray:
        case ds_type_tuple:
            valid_type = true;
        break;
    }
    
    return (ds_exists(_source.obj) || is_array(_source.obj)) && valid_type;
}

function ds_object_source(_source) {
    return _source.obj;
}

function ds_object_type(_source) {
    return _source.ty;
}

function ds_object_type_as_string(_source) {
	if (is_undefined(_source) || !ds_object_is_valid(_source))
        return "";
    
    switch(_source) {
		case ds_type_list:
			return "ds_type_list";
		break;
		case ds_type_grid:
			return "ds_type_grid";
		break;
		case ds_type_map:
			return "ds_type_map";
		break;
		case ds_type_queue:
			return "ds_type_queue";
		break;
		case ds_type_stack:
			return "ds_type_stack";
		break;
		case ds_type_priority:
			return "ds_type_priority";
		break;
		case ds_type_array:
			return "ds_type_array";
		break;
		case ds_type_2darray:
			return "ds_type_2darray";
		break;
        case ds_type_tuple:
			return "ds_type_tuple";
		break;
	}
}

function ds_object_tuple_write(_source, _val, _AorB) {
    if (_AorB) return _source.obj.val1 = _val;
    return _source.obj.val2 = _val;
}

function ds_object_tuple_read(_source, _AorB) {
    if (_AorB) return _source.obj.val1;
    return _source.obj.val2;
}
